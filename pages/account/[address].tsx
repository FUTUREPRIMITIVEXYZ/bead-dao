import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useAccount } from "wagmi";
import { useEffect, useState } from "react";
import { Card } from "../../components/card";
import { Background } from "../../components/background";
import WalletIcon from "../../components/walletIcon";
import { OpenSeaIcon } from "../../components/openseaIcon";
import { EtherscanIcon } from "../../components/etherscanIcon";
import { TwitterIcon } from "../../components/twitterIcon";
// import { GraphViewIcon } from "../../components/graphViewIcon";
import { AddressBar } from "../../components/addressBar";
import useGetNfts from "../../utils/hooks/useGetNfts";
import { useRouter } from "next/router";
import { fetchEnsName } from "@wagmi/core";
import { NftViewer, Nft } from "../../components/nftViewer";
import { RefreshIcon } from "../../components/refreshIcon";

const Address: NextPage = () => {
  const [addressToFetch, setAddressToFetch] = useState<string | undefined>("");
  const [ensName, setEnsName] = useState<string | undefined>();
  const [ownedBy, setOwnedBy] = useState("");

  const [displayedNft, setDisplayedNft] = useState<Nft>({
    image: "/liz-nft.png",
    name: "No lizards. Go mint",
    address: "",
    format: "jpeg",
    contract: "",
    tokenId: "",
  });
  const { address } = useAccount();

  const router = useRouter();
  const { query } = router;
  const { address: queryAddress, tokenId } = query;

  useEffect(() => {
    if (queryAddress) {
      setAddressToFetch(
        Array.isArray(queryAddress) ? queryAddress[0] : queryAddress
      );
    } else {
      setAddressToFetch(address);
    }
  }, [address, queryAddress]);

  useEffect(() => {
    async function getEnsName() {
      if (addressToFetch) {
        const ensName = await fetchEnsName({
          address: addressToFetch as `0x${string}`,
        });

        if (ensName) {
          setEnsName(ensName);
        }
      }
    }

    getEnsName();
  }, [addressToFetch]);

  useEffect(() => {
    if (address) {
      if (address?.toLowerCase() === addressToFetch?.toLowerCase()) {
        setOwnedBy(ensName || `${address.slice(0, 4)}...${address.slice(-4)}`);
        return;
      }

      if (addressToFetch) {
        setOwnedBy(
          `${addressToFetch.slice(0, 4)}...${addressToFetch.slice(-4)}`
        );
        return;
      }
    }
  }, [address, addressToFetch, ensName]);

  const {
    data,
    mutate: refetch,
    isValidating,
    isLoading,
  } = useGetNfts({ address: addressToFetch });

  useEffect(() => {
    if (data && data.length === 0) {
      router.push("/scan");
    }
  }, [data, data?.length, router]);

  useEffect(() => {
    if (!tokenId && data && data.length) {
      setDisplayedNft({
        image: data[0].image,
        name: data[0].name,
        address: data[0].address,
        format: data[0].format,
        contract: data[0].contract,
        tokenId: data[0].tokenId,
      });

      return;
    }

    if (data) {
      const foundTokenId = data.find((item) => item.tokenId === tokenId);
      if (foundTokenId)
        setDisplayedNft({
          image: foundTokenId.image,
          name: foundTokenId.name,
          address: foundTokenId.address,
          format: foundTokenId.format,
          contract: foundTokenId.contract,
          tokenId: foundTokenId.tokenId,
        });

      return;
    }
  }, [data, tokenId, addressToFetch]);

  return (
    <div>
      <Head>
        <title>Bead DAO</title>
        <meta
          name="description"
          content="Generated by @rainbow-me/create-rainbowkit"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Background>
        {isValidating || isLoading ? (
          <div className="flex flex-col justify-center items-center h-full">
            <div className="relative ">
              <video
                className="object-cover h-[353px] w-[367px]"
                src="/lizzlfying.webm"
                autoPlay
                loop
              />
              <div className="absolute top-[50%] left-[50%] translate-x-[-50%] translate-y-[-50%]">
                <div className="py-3 px-4 text-3xl whitespace-nowrap text-white rounded-full cursor-pointer font-bold">
                  LOADING....
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div>
            {data && data.length !== 0 && (
              <>
                <div className="flex justify-end items-center w-full p-5">
                  <RefreshIcon handleClick={() => refetch()} />
                </div>
                <NftViewer nft={displayedNft} ownedBy={ownedBy} />
              </>
            )}
            {/* {displayChildren && (
              <Card>
                <div className="grid grid-cols-2 gap-4 place-content-between">
                  {(data || []).map((lizard, i) => (
                    <div
                      key={i}
                      className="w-full overflow-hidden cursor-pointer"
                      onClick={(e) => {
                        e.preventDefault();
                        handleClick(lizard.tokenId);
                      }}
                    >
                      {!lizard.format ? (
                        <Image
                          className="bg-contain h-full w-full border-2 border-solid border-black rounded-2xl overflow-hidden"
                          height={154}
                          width={154}
                          alt="beaded lizard image"
                          src={"/liz-nft.png"}
                        />
                      ) : (
                        <>
                          {lizard.format === "mp4" ||
                          lizard.format === "webm" ? (
                            <div className="h-[154px] w-[154px]">
                              <video
                                className="object-cover"
                                src={lizard.image}
                                autoPlay
                                loop
                              />
                            </div>
                          ) : (
                            <Image
                              className="bg-contain h-full w-full border-2 border-solid border-black rounded-2xl overflow-hidden"
                              height={154}
                              width={154}
                              alt="beaded lizard imaged"
                              src={lizard.image || "/liz-nft.png"}
                            />
                          )}
                        </>
                      )}
                      <div className="font-xm font-bold">{lizard.name}</div>
                      <AddressBar text={lizard.name} link="/" size="sm" />
                    </div>
                  ))}
                </div>
              </Card>
            )} */}
          </div>
        )}
      </Background>
    </div>
  );
};

export default Address;
