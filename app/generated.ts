// Generated by @wagmi/cli@1.3.0 on 8/4/2023 at 4:51:43 PM
import {
  useNetwork,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  Address,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BEAD
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export const beadABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_lizardRoot', internalType: 'bytes32', type: 'bytes32' },
      { name: '_editionCount', internalType: 'uint256', type: 'uint256' },
      { name: '_baseURI', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'editionCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMessageHash',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'imageURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lizardRoot',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
      { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'message', internalType: 'string', type: 'string' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pendingOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'renderer',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export const beadAddress = {
  1: '0xDC754d884217E658E5a158E31236D8AeeC4d25A7',
  11155111: '0x4909145BCdFeC4984636656098f8359391a84142',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export const beadConfig = { address: beadAddress, abi: beadABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link beadABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof beadABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    ...config,
  } as UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"balanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof beadABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"baseURI"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadBaseUri<
  TFunctionName extends 'baseURI',
  TSelectData = ReadContractResult<typeof beadABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'baseURI',
    ...config,
  } as UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"editionCount"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadEditionCount<
  TFunctionName extends 'editionCount',
  TSelectData = ReadContractResult<typeof beadABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'editionCount',
    ...config,
  } as UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"getApproved"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof beadABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"getMessageHash"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadGetMessageHash<
  TFunctionName extends 'getMessageHash',
  TSelectData = ReadContractResult<typeof beadABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'getMessageHash',
    ...config,
  } as UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"imageURI"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadImageUri<
  TFunctionName extends 'imageURI',
  TSelectData = ReadContractResult<typeof beadABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'imageURI',
    ...config,
  } as UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"isApprovedForAll"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof beadABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"lizardRoot"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadLizardRoot<
  TFunctionName extends 'lizardRoot',
  TSelectData = ReadContractResult<typeof beadABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'lizardRoot',
    ...config,
  } as UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"name"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof beadABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"owner"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof beadABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"ownerOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof beadABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"pendingOwner"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadPendingOwner<
  TFunctionName extends 'pendingOwner',
  TSelectData = ReadContractResult<typeof beadABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'pendingOwner',
    ...config,
  } as UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"renderer"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadRenderer<
  TFunctionName extends 'renderer',
  TSelectData = ReadContractResult<typeof beadABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'renderer',
    ...config,
  } as UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof beadABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"symbol"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof beadABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"tokenURI"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof beadABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof beadABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link beadABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof beadAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof beadABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof beadABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof beadABI, TFunctionName, TMode>({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"acceptOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadAcceptOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof beadAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof beadABI, 'acceptOwnership'>['request']['abi'],
        'acceptOwnership',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'acceptOwnership' }
    : UseContractWriteConfig<typeof beadABI, 'acceptOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'acceptOwnership'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof beadABI, 'acceptOwnership', TMode>({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'acceptOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"approve"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadApprove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof beadAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof beadABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'approve' }
    : UseContractWriteConfig<typeof beadABI, 'approve', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approve'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof beadABI, 'approve', TMode>({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"mint"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadMint<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof beadAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof beadABI, 'mint'>['request']['abi'],
        'mint',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'mint' }
    : UseContractWriteConfig<typeof beadABI, 'mint', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mint'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof beadABI, 'mint', TMode>({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof beadAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof beadABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof beadABI, 'renounceOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof beadABI, 'renounceOwnership', TMode>({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof beadAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof beadABI, 'safeTransferFrom'>['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof beadABI, 'safeTransferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof beadABI, 'safeTransferFrom', TMode>({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof beadAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof beadABI, 'setApprovalForAll'>['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof beadABI, 'setApprovalForAll', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof beadABI, 'setApprovalForAll', TMode>({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"transferFrom"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof beadAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof beadABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof beadABI, 'transferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferFrom'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof beadABI, 'transferFrom', TMode>({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof beadAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof beadABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof beadABI, 'transferOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof beadABI, 'transferOwnership', TMode>({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link beadABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function usePrepareBeadWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof beadABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof beadABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"acceptOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function usePrepareBeadAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof beadABI, 'acceptOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'acceptOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof beadABI, 'acceptOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"approve"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function usePrepareBeadApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof beadABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof beadABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"mint"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function usePrepareBeadMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof beadABI, 'mint'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof beadABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function usePrepareBeadRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof beadABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof beadABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function usePrepareBeadSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof beadABI, 'safeTransferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof beadABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function usePrepareBeadSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof beadABI, 'setApprovalForAll'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof beadABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"transferFrom"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function usePrepareBeadTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof beadABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof beadABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link beadABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function usePrepareBeadTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof beadABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof beadABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link beadABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof beadABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof beadAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    ...config,
  } as UseContractEventConfig<typeof beadABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link beadABI}__ and `eventName` set to `"Approval"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof beadABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof beadABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link beadABI}__ and `eventName` set to `"ApprovalForAll"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof beadABI, 'ApprovalForAll'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof beadABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link beadABI}__ and `eventName` set to `"OwnershipTransferStarted"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadOwnershipTransferStartedEvent(
  config: Omit<
    UseContractEventConfig<typeof beadABI, 'OwnershipTransferStarted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    eventName: 'OwnershipTransferStarted',
    ...config,
  } as UseContractEventConfig<typeof beadABI, 'OwnershipTransferStarted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link beadABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof beadABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof beadABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link beadABI}__ and `eventName` set to `"Transfer"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xDC754d884217E658E5a158E31236D8AeeC4d25A7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4909145BCdFeC4984636656098f8359391a84142)
 */
export function useBeadTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof beadABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof beadAddress } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: beadABI,
    address: beadAddress[chainId as keyof typeof beadAddress],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof beadABI, 'Transfer'>)
}
